/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./Security/utils.ts ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GenericFunctionality: () => (/* binding */ GenericFunctionality),
/* harmony export */   InsertNodeDynamicly: () => (/* binding */ InsertNodeDynamicly),
/* harmony export */   cipher: () => (/* binding */ cipher),
/* harmony export */   decipher: () => (/* binding */ decipher)
/* harmony export */ });
const cipher = salt => {
    const textToChars = text => text.split('').map(c => c.charCodeAt(0));
    const byteHex = n => ("0" + Number(n).toString(16)).substr(-2);
    const applySaltToChar = code => textToChars(salt).reduce((a, b) => a ^ b, code);
    return text => text.split('')
        .map(textToChars)
        .map(applySaltToChar)
        .map(byteHex)
        .join('');
};
const decipher = salt => {
    const textToChars = text => text.split('').map(c => c.charCodeAt(0));
    const applySaltToChar = code => textToChars(salt).reduce((a, b) => a ^ b, code);
    return encoded => encoded.match(/.{1,2}/g)
        .map(hex => parseInt(hex, 16))
        .map(applySaltToChar)
        .map(charCode => String.fromCharCode(charCode))
        .join('');
};
class GenericFunctionality {
    static getFormattedDate(date) {
        const day = date.getDate();
        const month = date.getMonth() + 1;
        const year = date.getFullYear().toString().slice(2);
        return day + '-' + month + '-' + year;
    }
    static CopyToClipboard(ele) {
        let r = document.createRange();
        r.selectNode(ele);
        window.getSelection().removeAllRanges();
        window.getSelection().addRange(r);
        document.execCommand('copy');
        window.getSelection().removeAllRanges();
    }
    static resizeImage(file) {
        const reader = new FileReader();
        reader.onload = function (event) {
            const img = new Image();
            img.onload = function () {
                const canvas = document.getElementById('canvas');
                const ctx = canvas.getContext('2d');
                const maxWidth = 1024;
                const maxHeight = 1024;
                let width = img.width;
                let height = img.height;
                if (width > maxWidth || height > maxHeight) {
                    if (width > height) {
                        height = Math.round((maxWidth / width) * height);
                        width = maxWidth;
                    }
                    else {
                        width = Math.round((maxHeight / height) * width);
                        height = maxHeight;
                    }
                }
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                canvas.toBlob(function (blob) {
                    const resizedFile = new File([blob], file.name, {
                        type: file.type,
                        lastModified: Date.now()
                    });
                    console.log('Resized file:', resizedFile);
                }, file.type);
            };
            img.src = event.target.result;
        };
        reader.readAsDataURL(file);
    }
    static appendFormData(formData, data, parentKey) {
        if (data && typeof data === 'object' && !(data instanceof File)) {
            Object.keys(data).forEach(key => {
                GenericFunctionality.appendFormData(formData, data[key], parentKey ? `${parentKey}[${key}]` : key);
            });
        }
        else {
            parentKey = parentKey;
            formData.append(parentKey, data);
        }
    }
    static removeNotRequiredProperties(objectToSubmitForm, element, key, value) {
        if (element && element.hasAttribute('dontcount') == true) {
            objectToSubmitForm[key] = null;
        }
        else {
            if (typeof value === 'string') {
                objectToSubmitForm[key] = value;
            }
            else if (typeof value === 'boolean') {
                objectToSubmitForm[key] = value;
            }
            else if (typeof value === 'number') {
                objectToSubmitForm[key] = value;
            }
            else {
                if (value !== null) {
                    objectToSubmitForm[key] = value;
                }
                else {
                    objectToSubmitForm[key] = null;
                }
            }
        }
    }
    static CreateNestedObject(obj, path, value) {
        const keys = path.split('.');
        let current = obj;
        for (let i = 0; i < keys.length - 1; i++) {
            if (!current[keys[i]]) {
                current[keys[i]] = {};
            }
            current = current[keys[i]];
        }
        const finalKey = keys[keys.length - 1];
        if (typeof value === 'string') {
            current[finalKey] = value;
        }
        else if (typeof value === 'boolean') {
            current[finalKey] = value;
        }
        else if (typeof value === 'number') {
            current[finalKey] = value;
        }
        else {
            current[finalKey] = value;
        }
    }
    static SetSelectedValue(selectObj, valueToSet) {
        for (var i = 0; i < selectObj.options.length; i++) {
            if (selectObj.options[i].value == valueToSet) {
                selectObj.options[i].selected = true;
                selectObj.selectedIndex = i;
                GenericFunctionality.HtmlLogs(`SetSelectedValue`, `Option value selected!`, selectObj.options[i].text);
                return;
            }
        }
    }
    static SetSelectedValueByText(selectObj, valueToSet) {
        for (var i = 0; i < selectObj.options.length; i++) {
            if (selectObj.options[i].text == valueToSet) {
                selectObj.options[i].selected = true;
                selectObj.selectedIndex = i;
                GenericFunctionality.HtmlLogs(`SetSelectedValueByText`, `Option value selected!`, selectObj.options[i].text);
                return;
            }
        }
    }
    static getFormElementKeyValuePairs(form) {
        GenericFunctionality.HtmlLogs(`getFormElementKeyValuePairs -`, `Getting key value pair of form element`, '');
        let formKeyValuePairElement = [];
        [...form].forEach((singleElement) => {
            formKeyValuePairElement.push({ key: singleElement[0].toUpperCase(), actualKey: singleElement[0], value: singleElement[1], htmlElement: singleElement, });
        });
        GenericFunctionality.HtmlLogs(`getFormElementKeyValuePairs -`, `Key Value pair`, formKeyValuePairElement);
        return formKeyValuePairElement;
    }
    static prettyJ(json) {
        if (typeof json !== 'string') {
            json = JSON.stringify(json, undefined, 2);
        }
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            let cls = "\x1b[36m";
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = "\x1b[34m";
                }
                else {
                    cls = "\x1b[32m";
                }
            }
            else if (/true|false/.test(match)) {
                cls = "\x1b[35m";
            }
            else if (/null/.test(match)) {
                cls = "\x1b[31m";
            }
            return cls + match + "\x1b[0m";
        });
    }
    static syntaxHighlight(json) {
        if (typeof json != 'string') {
            json = JSON.stringify(json, undefined, 2);
        }
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                }
                else {
                    cls = 'string';
                }
            }
            else if (/true|false/.test(match)) {
                cls = 'boolean';
            }
            else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }
    static HtmlApiLogs(message, apiLogs) {
        if (GenericFunctionality.Environment && GenericFunctionality.Environment == "Production") {
            return;
        }
        let logsModal = document.querySelector(`#logs`);
        logsModal.innerHTML += `<b style='color:#574fa9;'>TS Operation:</b> (${new Date().toLocaleString()}): ${message}: <pre class='displaylogs'>${apiLogs}</pre> <br>`;
    }
    static addItemToCookie(key, value, expirationDays) {
        const date = new Date();
        date.setTime(date.getTime() + (expirationDays * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        document.cookie = key + "=" + value + expires + "; path=/";
    }
    static getCookie(key) {
        const name = key + "=";
        const decodedCookie = decodeURIComponent(document.cookie);
        const cookieArray = decodedCookie.split(';');
        for (let i = 0; i < cookieArray.length; i++) {
            let cookie = cookieArray[i];
            while (cookie.charAt(0) === ' ') {
                cookie = cookie.substring(1);
            }
            if (cookie.indexOf(name) === 0) {
                return cookie.substring(name.length, cookie.length);
            }
        }
        return undefined;
    }
    static HtmlLogs(message, key, dataToDisplay) {
        if (GenericFunctionality.Environment && GenericFunctionality.Environment == "Production") {
            return;
        }
        let logsModal = document.querySelector(`#logs`);
        if (!key)
            key = '';
        let parsedObj;
        try {
            parsedObj = JSON.parse(dataToDisplay);
            dataToDisplay = JSON.stringify(parsedObj, null, 4);
        }
        catch (error) {
            parsedObj = dataToDisplay;
        }
        if (typeof parsedObj === 'object' && parsedObj) {
            logsModal.innerHTML += `<b style='color:#574fa9;'>TS Operation:</b> (${new Date().toLocaleString()}) : ${message}: <b>${key}</b>  <span> <a href="#" class='pull-right copyMeInMemory' id="copyButton"><i class="fa fa-file-o"></i></a></span>  <pre class='displaylogs contentToCopy'>${GenericFunctionality.syntaxHighlight(dataToDisplay)}</pre> <br>`;
        }
        else {
            if (dataToDisplay === undefined) {
                dataToDisplay = 'Undefined object value!';
            }
            if (dataToDisplay !== '') {
                logsModal.innerHTML += `<b style='color:#574fa9;'>TS Operation:</b> (${new Date().toLocaleString()}): ${message}: <b>${key}</b> <span>  <a href="#" class='pull-right copyMeInMemory' id="copyButton"><i class="fa fa-file-o"></i></a></span> <pre class='contentToCopy'>${GenericFunctionality.syntaxHighlight(dataToDisplay)}</pre> <br>`;
            }
            else {
                logsModal.innerHTML += `<b style='color:#574fa9;'>TS Operation:</b> (${new Date().toLocaleString()}): ${message}: <b>${key}</b><br>`;
            }
        }
        let nodeToCopy = document.getElementsByClassName('copyMeInMemory');
        for (let node of nodeToCopy) {
            node.addEventListener('click', function () {
                var _a;
                let ele = (_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.nextElementSibling;
                GenericFunctionality.CopyToClipboard(ele);
            }, false);
        }
    }
    static getKeyValuePairs(obj, prefix = '') {
        let pairs = [];
        for (let key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                let newKey = prefix ? `${prefix}.${key}` : key;
                let value = obj[key];
                if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                    pairs = pairs.concat(GenericFunctionality.getKeyValuePairs(value, newKey));
                }
                else {
                    pairs.push({ key: newKey.toUpperCase(), value: value });
                }
            }
        }
        return pairs;
    }
    static removeOptions(selectElement) {
        GenericFunctionality.HtmlLogs(`removeOptions`, `Removing existing options from department dropdown!`, '');
        while (selectElement.options.length) {
            selectElement.remove(0);
        }
        GenericFunctionality.HtmlLogs(`removeOptions`, `options removed.!`, '');
    }
    static addDefaultRecordOnSelectElement(defaultContent, departmentListElement) {
        GenericFunctionality.HtmlLogs(`addDefaultRecordOnSelectElement`, `Adding default rcord on !`, departmentListElement.name);
        let el = document.createElement("option");
        el.textContent = defaultContent;
        el.value = `-1`;
        departmentListElement.appendChild(el);
        GenericFunctionality.HtmlLogs(`addDefaultRecordOnSelectElement`, `Default rcord on !`, departmentListElement.name);
    }
    static toCamelCase(str) {
        if (str.indexOf(`.`) > 0) {
            let arrOfProperty = str.split(".");
            let concateString = ``;
            arrOfProperty.forEach((arrElement, index) => {
                concateString = concateString + arrElement
                    .replace(/\s(.)/g, function ($1) { return $1.toUpperCase(); })
                    .replace(/\s/g, '')
                    .replace(/^(.)/, function ($1) { return $1.toLowerCase(); });
                if (index != arrOfProperty.length - 1) {
                    concateString = concateString + ".";
                }
            });
            return concateString;
        }
        return str
            .replace(/\s(.)/g, function ($1) { return $1.toUpperCase(); })
            .replace(/\s/g, '')
            .replace(/^(.)/, function ($1) { return $1.toLowerCase(); });
    }
    static buildUrl(baseUrs, UseBrowserCache, params, args) {
        const prms = params === null || params === void 0 ? void 0 : params.map((value, index) => {
            return `${value}=${args[index]}`;
        });
        if (params) {
            return `${baseUrs}?UseCache=${UseBrowserCache}&${prms.join(`&`)}`;
        }
        else {
            return `${baseUrs}?UseCache=${UseBrowserCache}`;
        }
    }
}
const InsertNodeDynamicly = function () {
    const IsFileAlreadyRendered = function (moduleName, tag) {
        const moduleNodes = document.querySelectorAll(tag);
        const moduleNodesArray = Array.from(moduleNodes);
        let listOfAvailableTags = moduleNodesArray.filter((value, index) => {
            if (tag == "link") {
                let cssTag = value;
                if (cssTag.href.toLowerCase().indexOf(moduleName.toLowerCase()) > -1) {
                    let newLinkTag = document.createElement(tag);
                    newLinkTag.href = moduleNodes[index].href;
                    newLinkTag.rel = "stylesheet";
                    document.head.appendChild(newLinkTag);
                    document.head.removeChild(newLinkTag);
                    return true;
                }
            }
            else if (tag == "script") {
                let jsTag = value;
                if (jsTag.src.toLowerCase().indexOf(moduleName.toLowerCase()) > -1) {
                    let newLinkTag = document.createElement(tag);
                    newLinkTag.src = moduleNodes[index].src;
                    document.body.appendChild(newLinkTag);
                    document.body.removeChild(newLinkTag);
                    return true;
                }
            }
            return false;
        });
        if (listOfAvailableTags.length > 0) {
            return true;
        }
        return false;
    };
    const InsertNodeElement = function (url, elementTagType, location, version) {
        if (elementTagType === "link") {
            const styleTag = document.createElement(elementTagType);
            styleTag.setAttribute('href', `${url}?v=${version}`);
            styleTag.setAttribute('rel', `stylesheet`);
            location.appendChild(styleTag);
        }
        else {
            const scriptTag = document.createElement(elementTagType);
            scriptTag.setAttribute('src', `${url}?v=${version}`);
            scriptTag.defer = true;
            scriptTag.type = "module";
            location.appendChild(scriptTag);
        }
        return true;
    };
    const loadJS = function (url, location, partialViewName, version) {
        const isNodeAlreadyExists = IsFileAlreadyRendered(partialViewName, "script");
        if (!isNodeAlreadyExists) {
            InsertNodeElement(url, "script", location, version);
        }
    };
    const loadCss = function (url, location, partialViewName, version) {
        const isNodeAlreadyExists = IsFileAlreadyRendered(partialViewName, "link");
        if (!isNodeAlreadyExists) {
            InsertNodeElement(url, "link", location, version);
        }
    };
    return {
        loadJS: loadJS,
        loadCss: loadCss,
    };
}();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,